#include "AlphaFitter.h"

#include <iostream>
#include <string>
#include <TROOT.h>
#include <TFile.h>
#include <TH1F.h>
#include <TMath.h>

using namespace std;

void fithisto(TH1F* data, TH1F* mc1, TH1F *mc2, double &frac, double &frac_err, string histoname)
{
  AlphaFitter fittest(data, mc1, mc2);
  fittest.DoFit();
  frac = fittest.GetFraction();
  frac_err = fittest.GetFractionError();  
  std::cout << "fraction is "<< frac << " error is "<< frac_err << std::endl;
  //fittest.SaveResult();
  //fittest.MakePlot(frac, true, histoname+ "__MC");
  fittest.MakePlot(frac, true, histoname+"__Data");
  return;
}

void GetDistribution(TFile *f1, string tpname, TH1F &hfrac, float binwidth[], int Nbins)
{
  string nhisto[20];
  double frac[20], frac_err[20];
 
  for ( int i=1; i< Nbins-1; i++){
    nhisto[i] = "jet_csv__nTrack" + std::to_string((int)binwidth[i-1]) + "to" + std::to_string((int)binwidth[i]-1);
  }
  nhisto[Nbins-1] = "jet_csv__nTrack" + std::to_string((int)binwidth[Nbins-2]) + "to24" ;
  std::cout << " histoname " << nhisto[Nbins-2] << std::endl;

  for( int i=1;  i< Nbins; i++){
    TH1F *mc1 = (TH1F*)f1->Get((nhisto[i]+ "__MClight__" + tpname ).c_str())->Clone(("mc1"+nhisto[i]).c_str());
    TH1F *mc2 = (TH1F*)f1->Get((nhisto[i]+ "__MCbquark__" + tpname ).c_str())->Clone(("mc2"+nhisto[i]).c_str());
    //TH1F *data = (TH1F*)f1->Get((nhisto[i]+ "__MC__" + tpname).c_str())->Clone(("data"+nhisto[i]).c_str());    
    TH1F *data = (TH1F*)f1->Get((nhisto[i]+ "__Data__" + tpname).c_str())->Clone(("data"+nhisto[i]).c_str());    
    fithisto(data, mc1, mc2, frac[i], frac_err[i], nhisto[i] + "__" + tpname);
  }

  for( int i=1; i< Nbins; i++){
    hfrac.SetBinContent(i, frac[i]); 	  
    hfrac.SetBinError(i, frac_err[i]);
  }
}

int main()
{
  string lTrack[20];

  float binwidth[] = {0, 4, 8, 12, 16, 20, 80}; 
  int Nbins = sizeof(binwidth)/sizeof(float);

  TFile *f1 = new TFile("/data/users/fengyb/frcal/getdistribution/result_csv_GJet_5mm_Data.root");

  TFile *myfile_save = new TFile("root/test_csv_GJet_5mm_Data.root","RECREATE");
  TH1F hfrac_typeV("fraction_typeV", "fraction distribution in TypeV", sizeof(binwidth)/sizeof(float)-1, binwidth);
  TH1F hfrac_typeVI( "fraction_typeVI",  "fraction distribution in TypeVI",  sizeof(binwidth)/sizeof(float)-1, binwidth);

  GetDistribution(f1, "TypeV", hfrac_typeV, binwidth, Nbins);
  GetDistribution(f1, "TypeVI",  hfrac_typeVI, binwidth, Nbins);
  hfrac_typeV.Write();
  hfrac_typeVI.Write();
  myfile_save->Close();
}   
